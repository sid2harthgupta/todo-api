name: Update API Documentation
on:
  push:
    branches: [main]
    paths:
      - 'src/todo_api/**/*.py'
  workflow_dispatch:

jobs:
  update-docs:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout todo-api
        uses: actions/checkout@v3
        with:
          path: todo-api

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.13'

      - name: Install dependencies
        working-directory: todo-api
        run: |
          pip install fastapi

      - name: Create documentation generation script
        run: |
          cat > generate_docs.py << 'EOF'
          import json
          import sys
          import os
          from pathlib import Path
          
          sys.path.insert(0, 'todo-api/src')
          from todo_api.main import app
          
          # Generate OpenAPI schema
          openapi_schema = app.openapi()
          
          # Save OpenAPI spec
          with open('openapi.json', 'w') as f:
              json.dump(openapi_schema, f, indent=2)
          
          # Create endpoint MDX files
          os.makedirs('endpoint-files', exist_ok=True)
          
          # Track generated files for navigation update
          generated_files = []
          
          for path, methods in openapi_schema.get('paths', {}).items():
              for method, details in methods.items():
                  # Generate filename based on operation
                  operation_id = details.get('operationId', '')
                  summary = details.get('summary', '')
                  
                  # Create appropriate filename
                  if 'get' in method.lower():
                      if '{' in path:  # Has path parameter
                          filename = 'get-todo.mdx'
                      else:
                          filename = 'list-todos.mdx'
                  elif 'post' in method.lower():
                      filename = 'create-todo.mdx'
                  elif 'delete' in method.lower():
                      filename = 'delete-todo.mdx'
                  elif 'put' in method.lower():
                      filename = 'update-todo.mdx'
                  elif 'patch' in method.lower():
                      filename = 'patch-todo.mdx'
                  else:
                      continue
                  
                  # Use summary as title or generate from method
                  title = summary if summary else f"{method.title()} {path}"
                  
                  # Create MDX content
                  mdx_content = f"""---
          title: '{title}'
          openapi: '{method.upper()} {path}'
          ---
          """
                  
                  # Write MDX file
                  with open(f'endpoint-files/{filename}', 'w') as f:
                      f.write(mdx_content)
                  
                  generated_files.append({
                      'filename': filename,
                      'title': title,
                      'method': method.upper(),
                      'path': path
                  })
          
          # Save metadata for navigation update
          with open('generated-files.json', 'w') as f:
              json.dump(generated_files, f, indent=2)
          
          print(f'Generated {len(generated_files)} endpoint files')
          EOF

      - name: Generate OpenAPI and endpoint files
        run: python generate_docs.py

      - name: Checkout docs repository
        uses: actions/checkout@v4
        with:
          repository: sid2harthgupta/docs
          token: ${{ secrets.DOCS_PUSH_TOKEN }}
          path: docs

      - name: Update documentation files
        run: |
          # Copy OpenAPI spec
          cp openapi.json docs/api-reference/openapi.json
          
          # Copy endpoint files
          mkdir -p docs/api-reference/endpoint
          cp endpoint-files/*.mdx docs/api-reference/endpoint/

      - name: Update navigation in docs.json
        working-directory: docs
        run: |
          python - << 'EOF'
          import json
          import os
          from pathlib import Path
          import re
          
          def extract_title_from_mdx(file_path):
              """Extract title from MDX frontmatter."""
              try:
                  with open(file_path, 'r') as f:
                      content = f.read()
                      match = re.search(r"^title:\s*['\"](.+?)['\"]", content, re.MULTILINE)
                      if match:
                          return match.group(1)
              except:
                  pass
              filename = Path(file_path).stem
              return filename.replace('-', ' ').title()
          
          # Get all endpoint files
          endpoint_dir = 'api-reference/endpoint'
          endpoint_files = []
          
          if os.path.exists(endpoint_dir):
              for file in sorted(os.listdir(endpoint_dir)):
                  if file.endswith('.mdx'):
                      file_path = os.path.join(endpoint_dir, file)
                      title = extract_title_from_mdx(file_path)
                      nav_path = f"api-reference/endpoint/{file[:-4]}"
                      endpoint_files.append(nav_path)
          
          if not endpoint_files:
              print("No endpoint files found")
              exit(0)
          
          # Read docs.json
          with open('docs.json', 'r') as f:
              docs_config = json.load(f)
          
          # Find API reference tab
          api_tab = None
          for tab in docs_config.get('navigation', {}).get('tabs', []):
              if tab.get('tab') == 'API reference':
                  api_tab = tab
                  break
          
          if api_tab:
              # Find or create endpoints group
              endpoints_group = None
              for group in api_tab.get('groups', []):
                  if 'endpoint' in group.get('group', '').lower():
                      endpoints_group = group
                      break
              
              if endpoints_group:
                  # Update pages
                  endpoints_group['pages'] = endpoint_files
                  print(f"Updated navigation with {len(endpoint_files)} endpoints")
              else:
                  # Create new group
                  api_tab['groups'].append({
                      "group": "API Endpoints",
                      "pages": endpoint_files
                  })
                  print(f"Created new group with {len(endpoint_files)} endpoints")
              
              # Save updated docs.json
              with open('docs.json', 'w') as f:
                  json.dump(docs_config, f, indent=2)
          EOF

      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.DOCS_PUSH_TOKEN }}
          path: docs
          commit-message: 'chore: update API documentation and navigation'
          branch: update-api-docs-${{ github.sha }}
          title: 'ğŸ“š Update API Documentation'
          body: |
            ## Automated API Documentation Update
            
            This PR updates the API documentation based on changes in the todo-api repository.
            
            ### Changes:
            - âœ… Updated `/api-reference/openapi.json`
            - âœ… Generated/updated endpoint MDX files
            - âœ… Updated navigation in `docs.json`
            
            ### Source commit: ${{ github.sha }}
          base: main
